{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Google Analytics en R, dejando de lado Excel\"\nauthor: \"omar gonzáles díaz\"\ndate: \"25 de setiembre de 2017\"\noutput: \n  html_document:\n    includes:\n      in_header: ../header.html\n      before_body: ../doc_prefix.html\n      after_body: ../after_body.html\n    code_folding: show\n    \n---\n\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(fig.width=12, fig.height=8,\n                      echo=TRUE, warning=FALSE, message=FALSE)\n```\n\n\n\n\n\n\n```{r load_packages, include=FALSE}\nlibrary(googleAnalyticsR)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(hrbrthemes)\nlibrary(scales)\nlibrary(ggthemes)\n\n```\n\n\n</br>\n</br>\n</br>\n\n\n# Google Analytics y R\n## Parte II: Gráficos con GGPLOT2\n\n</br>\n</br>\n\n\n![](02-googleAnalyticsR_files/figure-html/sesiones_hora.jpg)\n\n\n\n\n\nEn esta entrada les mostraré cómo generar gráficos con la data de Google Analytics en R, con la librería `ggplot2`. \n\nHay muchas formas de generar gráficos en R, cada uno con sus ventajas y sus desventajas. El foco aquí sera en el paquete `ggplot2`, que se basa en **The Grammar of Gráfics (by Leland Wilkinson)** para describir gráficos basados en datos.\n\nBasicamente lo que propone este libro es que pensemos en los gráficos como un conjunto de capas que dan sentido a la información. En este conjunto de capas (layers) las principales son los datos y los geomas (*Geoma viene de forma __geom__étrica).\n\n\n`datos + geomas + title -> gráfico`\n\n\n\n[The Grammar of Graphics](http://vita.had.co.nz/papers/layered-grammar.pdf)\n\n\n[Guía rápida de Ggplot2](https://www.rstudio.com/wp-content/uploads/2016/12/ggplot2-cheatsheet-2.1-Spanish.pdf) Esta es la guía rápida de `ggplot2` donde podrán encontrar casi la totalidad de comandos de esta potente librería de visualización de datos.\n\n\nEspero que al final del post puedan generar diferentes gráficos con la data de Google Analytics.\n\n</br>\n</br>\n\n\n\n\n![](02-googleAnalyticsR_files/figure-html/graphics-3.png)\n\n</br>\n</br>\n</br>\n\n\n#Creando un plot\n\n</br>\n\nLo primero que tenemos que hacer es instalar `ggplot2` con el siguiente comando:\n\n`install.packages(\"ggplot2\")`\n\n\nPara iniciar un plot utilizamos la función `ggplot()`. Esta función crea un sistema de coordenadas a la que le puedes añadir diferentes capas (\"layers\") de información. \n\nEl primer argumento de `ggplot()` es la data a utilizar en el gráfico. Así: `ggplot(data = sesiones)`.\n\n\nTambién necesitamos definir dentro de la función `ggplot()` los ejes `x` y `y` de nuestro plot. Esto lo definimos dentro de la \"minifunción\" `aes()`, que especifica que variables se mapean a los ejes `x` y `y`. `ggplot2` busca las variables mapeadas en la data de la función `ggplot()`.\n\n\nHasta el momento nuestro código para generar un plot básico quedaría así:\n\n```{r pre-before-plot, eval=FALSE, echo=TRUE, message=FALSE, warning=FALSE}\n\nggplot(data = mpg, aes(x = displ, y = hwy))\n\n```\n\nQue representa lo siguiente: `ggplot2` utiliza la data `sesiones`, y la columna dia para el `eje x` y la cantidad de sesiones, que se encuentra en la columna sesiones para el `eje y`.\n\n\nA lo que `ggplot2` nos respondería: ¡perfecto! Vamos bien, pero ahora necesito que me indiques qué tipo de gráfico necesitas: ¿de barras? ¿de puntos? ¿un gráfico lineal, tal véz?\n\n\nBasicamente nos está diciendo que necesitamos especificar el geoma a utilizar: `geom_*()`, para cada tipo de gráfico existe un geoma diferente. Por ejemplo, la función `geom_point()` añade una capa de puntos al gráfico, lo que crea un `scatterplot` (así se conoce al gráfico de puntos `r emo::ji(\"relieved\")`). \n\n`ggplot2` viene con varios geomas, cada uno agrega un tipo de capa distinto al plot, entre ellos: `geom_col()`, `geom_point()`, `geom_bar()`, `geom_boxpot()`. \n\n\n\n</br>\n</br>\n\n\n## Estructura de un plot básico\n\n</br>\n\nNuestro código para generar un plot con la data `mpg` quedaría así:\n\n```{r before-plot, eval=TRUE, echo=TRUE, message=FALSE, warning=FALSE}\n\nlibrary(ggplot2)\n\nggplot(data = mpg, aes(x = displ, y = hwy)) + \n  geom_point()\n\n```\n\n\nEn resumen:\n\nPara generar un gráfico __básico__ necesitamos las funciones `ggplot()` y un geoma `geom_*()` con sus respectivos argumentos:\n\n\n1. `ggplot(data = mpg, aes(x = displ, y = hwy))` la función plot indicando con que data se va a trabajar, y los ejes `x` y `y`.  \n\n2. `geom_point()` el geoma a usar. \n\n3. Y ambas funciones se unen con el signo `+`. \n\n\n\n\n</br>\n</br>\n\n\n\n## Estructura de un plot completo\n\n</br>\n\nPara obtener un plot más atractivo visualmente podemos utilizar diferentes funciones dentro del paquete `ggplot2` o ayudarnos de otras librerías como `ggthemes` y `hrbrthemes`. \n\nEn la siguiente imagen utilizamos la misma data del plot básico, solo que le agregamos las funciones `labs()` (para agregar título, subtítulo, nombre eje `x` y `y`) y `theme_ipsum_rc()` (esta función transforma la apariencia del plot, según características determinadas por el autor de la librería). `labs()` pertenece a la librería `ggplot2`, mientras que `theme_ipsum_rc()` a la librería `hrbrthemes`.\n\n\nDentro de `ggthemes` también existen otras funciones para cambiar la apariencia del plot, tales como:\n\n* theme_economist() #en referencia a The Economist.\n* theme_gdocs() #gráficos con apariencia de Google Docs.\n* theme_fivethirtyeight() #en relación a la famosa página de visualización de datos (fivethirtyeight.com).   \n* theme_tufte() #Basada en el libro \"The Display of Quantitative Information\" de Edward Tufte.\n\n\n\n```{r complete-plot-hrbrtheme, message=FALSE, warning=FALSE, results=\"hide\"}\n\n\nlibrary(ggplot2)\nlibrary(ggthemes)\nlibrary(hrbrthemes)\n\ntitle <- \"Eficiencia del motor vs capacidad de combustible\" \n\nbb <- ggplot(data = mpg, aes(x = displ, y = hwy, color = class)) \nbb <- bb + geom_point(size = 2)\nbb <- bb + labs(x=\"displ\", y=\"hwy\", title= title)\nbb <- bb + theme_ipsum_rc()\nbb <- bb + ylim(0,50)\nbb\n\n\n```\n\n\n\n</br>\n</br>\n\n### The Economist: mismo plot pero con el theme_economist()\n\nEl `theme_economist()` hace referencia a la famosa revista [The Economist](https://www.economist.com/).\n\n\n```{r complete-plot-economist, message=FALSE, warning=FALSE, results=\"hide\"}\n\n\nlibrary(ggplot2)\nlibrary(ggthemes)\nlibrary(hrbrthemes)\n\ntitle <- \"Eficiencia del motor vs capacidad de combustible\" \n\nbb <- ggplot(data = mpg, aes(x = displ, y = hwy, color = class)) \nbb <- bb + geom_point(size = 2)\nbb <- bb + labs(x=\"displ\", y=\"hwy\", title= title)\nbb <- bb + theme_economist()\nbb <- bb + ylim(0,50)\nbb\n\n\n```\n\n</br>\n</br>\n\n\n#Google Analytics: gráficos\n\n</br>\n\n##Obteniendo la data para generar nuestros gráficos con la data de GA \n\n</br>\n\n\nAhora que ya tienes los conceptos básicos para generar un plot, vamos a extrar la data directamente desde **Google Analytics** para empezar a trabajar.\n\nEn este [post](googleAnalyticsR.html) explico cómo obtener la data desde el *API* de *GA*, si necesitan más detalles sobre el proceso les recomiendo revisarlo. En esta ocasión solamente les muestro el código que utilizaremos para generar nuestros gráficos.\n\n\nVamos a obtener 3 data frames: \n\na.`sesiones`: con las columnas `date`,`hour`, `source`, `medium`, `sessions`.\n\nb.`sesiones_por_horas`: con las columnas `date`, `hour`,`sessions`.\n\nSi notaron, los datos de `sesiones` contienen los datos de `sesiones_por_horas`. Entonces, ¿por qué hacemos 2 llamadas distintas al API de GA, si son los mismos datos?\n\nBásicamente la respuesta es porque el *API* de *GA* soporta un límite en la combinación dimnesiones y métricas cuando se realizan las consultas, si forzamos el API podemos obtener datos erróneos.\n\n\nNo olvides utilizar Goolge Analytics - Query Builder, de la cual les conté en el post anterior, para comprender mejor qué dimensiones y qué métricas pueden utilizarse en conjunto (y evitar que el API de GA explote) `r emo::ji(\"stuck_out_tongue_winking_eye\")`.\n\n\n\n[Google Analyitcs - Query Builder](https://ga-dev-tools.appspot.com/query-explorer/ \"Google Analytics - Query Builder\")\n\n\n\n```{r sesiones, eval=TRUE, cache=TRUE, message=FALSE, warning=FALSE}\n\nlibrary(googleAnalyticsR)\n\n#Autoriza  Google Analytics R- esto abrira una ventana\n#en tu navegador web. Deberás loggearte con el email \n#con el que ingresas normalmente a Google Analytics.\n\nga_auth()\n\n#Utiliza el Google Analytics Management API para ver\n#una lista de las cuentas de Google Analytics a las que \n#tienes acceso.\n\nmy_accounts <- ga_account_list()\n\n#Usa la variable my_accounts para encontrar el viewId (Id de la vista)\n#Asegúrate de reemplazar el valor de my_id con el ID correcto.\n\n\nmy_id <- 91285066\n\n#Configura variables para una selección de fechas dinámica\n\nstart_date <- as.Date(\"2017-01-01\") \nend_date <- Sys.Date() - 1\n\n\n\n#Session Query por fuente y medio - usa start_date y end_date\n\nsesiones <- google_analytics_4(my_id, \n                                    date_range = c(start_date, end_date),\n                                    metrics = c(\"sessions\"),\n                                    dimensions = c(\"date\",\"hour\", \"source\", \"medium\"))\n\n\n\n\n#Session Query por hora - usa start_date y end_date\n\n\nsesiones_por_horas <- google_analytics_4(my_id, \n                                    date_range = c(start_date, end_date),\n                                    metrics = c(\"sessions\"),\n                                    dimensions = c(\"date\", \"hour\"),\n                                    anti_sample = T)\n\n\n\n\n```\n\n\n\n</br>\n</br>\n\n##Inspeccionando los datos con los que vamos a trabajar\n\n\n</br>\n\n\nPara conocer los datos que obtuvimos de nuestras llamadas al API, vamos a inspeccionarlos con las funciones:\n\n`str()` y `head()`\n\n1. `str`: esta función nos permitirá conocer nuestras variables (la cantidad de columnas) y  las observaciones(filas) de los datos, así como el qué `tipo de datos` con los que contamos. \n\nPor ejemplo, nuestro data frame `sesiones` consta de: `472 obs. de  5 variables`. \n\nEstas 5 variables, que, comúnmente, nosotros conocemos como columnas son de los siguientes tipos:\n\n* `date`: de tipo `Date`.\n* `hour`: de tipo `chr` (character o texto).\n* `source`: de tipo `chr` (character o texto).\n* `medium`: de tipo `chr` (character o texto).\n* `sessions`: de tipo `num` (numérico).\n\n\n\nCada tipo de variable tiene propiedades distintas, por ejemplo: las variables de tipo `chr` no se pueden sumar, mientras que las de tipo `num` sí. En otro post explicaremos más a detalle esto, ya que es necesario tener claras las diferencias entre los distintos tipos. En este caso, al obtener las variables en el tipo adecuado no nos es necesario hacer ningún tipo de transformación. Repito, sino entiendes esto último no te preocupes, en el próximo post lo explicaré a detalle `r emo::ji(\"innocent\")`.\n\n2. `head()`: Además de la función `str()`, podemos utilizar la función `head()` para conocer las primeras observaciones (filas) de nuestros datos.\n\n\n```{r sesiones-datos, eval=TRUE, echo=TRUE, cache=TRUE, message=FALSE, warning=FALSE, dependson=sesiones}\n\n\nstr(sesiones)\n\n\nhead(sesiones, n = 5)\n\n\n```\n\n\n</br>\n</br>\n\n\n\n\n##Transformación de datos\n\n\n</br>\n\n\n```{r data-transformation, message=FALSE, warning=FALSE, dependson='cleaning-data', cache=TRUE}\n\n\n\n#####################################\n###### Transformación de datos ######\n#####################################\n\n### Remove white spaces ambos lados\n\n\nsesiones$medium <- trimws(sesiones$medium, which = \"both\")\n\nsesiones$source <- trimws(sesiones$source, which = \"both\")\n\n\n#########################################\n\n\nsesiones$mes <- months(sesiones$date)\n\nsesiones$mes <- factor(sesiones$mes, levels = c(\"Enero\", \"Febrero\",\n                                                \"Marzo\", \"Abril\",\n                                                \"Mayo\", \"Junio\",\n                                                \"Julio\", \"Agosto\",\n                                                \"Setiembre\"), ordered = T)\n\n\n\n\nsesiones$dia <- weekdays(sesiones$date)\n\nsesiones$dia <- ordered(sesiones$dia, levels=rev(c(\"lunes\",\"martes\",\"miércoles\",\"jueves\",\n                                                   \"viernes\", \"sábado\",\"domingo\"))) \n\n\n\n\n\nsesiones_por_horas$dia <- weekdays(sesiones_por_horas$date)\n\n\n\nsesiones_por_horas$dia <- ordered(sesiones_por_horas$dia, levels=rev(c(\"lunes\",\"martes\",\"miércoles\",\"jueves\",\n                                                   \"viernes\", \"sábado\",\"domingo\"))) \n\n\n\n\nsesiones_por_mes <- sesiones %>%\n  group_by(mes) %>%\n  summarise(sessions = sum(sessions))\n\n\n\nsesiones_hora <- sesiones_por_horas %>%\n                  group_by(dia, hour) %>%\n                  summarise(sessions = sum(sessions))\n\n\n\n\nsesiones_por_dia <- sesiones %>%\n                    group_by(date) %>%\n                    summarise(sessions = sum(sessions))\n\n\n\n\n\n\n```\n\n</br>\n</br>\n\n##Gráficos estandar de Google Analytics\n\n</br>\n\n\n### Sesiones por mes \n\nRecomiendo siempre empezar por un gráfico como este, que muestre el total de los resultados dentro del rango de fecha elegido.\n\nEn este caso, estamos viendo los datos desde el \"01-01-2017\" hasta el día de ayer (01-10-2017) de mi página personal: (www.omargonzalesdiaz.com).\n\nEs bueno empezar contextualizando al lector, y recién luego llevarlo a los detalles.\n\n</br>\n\n```{r sesiones-por-mes, message=FALSE, warning=FALSE, dependson='data-transformation'}\n\n#####################################\n############ Gráficos ###############\n#####################################\n\n### Sesiones por mes \n\ntitle <- \"Sesiones por mes\" \n\ndd <- ggplot(sesiones_por_mes, aes(x = mes, y = sessions, fill = sessions, label = sessions)) \n\ndd <- dd +  geom_col()\ndd <- dd + labs(x=\"meses\", y=\"sesiones\", title= title)\ndd <- dd + scale_fill_gradient_tableau(name = \"# Sesiones\")\ndd <- dd + theme(plot.title=element_text(hjust=0.1))\ndd <- dd + theme(axis.ticks=element_blank())\ndd <- dd + theme(axis.text=element_text(size=12))\ndd <- dd + theme(legend.title=element_text(size=10))\ndd <- dd + theme(legend.text=element_text(size=8))\ndd <- dd + theme_ipsum_rc()\ndd <- dd + theme_modern_rc()\ndd <- dd + geom_label(vjust = -0.5)\ndd <- dd + ylim(0,400)\n#dd <- dd + geom_label(fill = \"white\", vjust = -0.5)\ndd\n\n\n```\n\n\n\n</br>\n</br>\n\n###Sesiones por hora\n\nMe gusta mucho este gráfico: Es bastante claro y tiene muchos _insights_ por contar. \n\n\nPor ejemplo, fácilmente podemos identificar que la mayor cantidad de visitas que hemos recibido se ha dado los lunes a las 11 am y los martes a las 4 pm. Y con esta información podríamos planificar mejor los lanzamientos de los posts que se vienen, entre otros detalles.\n\n\nSin embargo, muy pocos lo utilizan debido al desconocimiento de cómo desarrollarlo en R. \n\nLas veces que lo he presentado ha sido del agrado de muchos; incluso, algunos colegas, me han pedido que les enseñe a realizar algo similar en Excel `r emo::ji(\"sweat_smile\")`. \n\n</br>\n\n```{r sesiones-por-hora, message=FALSE, warning=FALSE, dependson='data-transformation'}\n\n#graph sessions por hora\n\ngg <- ggplot(sesiones_hora, aes(x=hour, y=dia, fill=sessions))\ngg <- gg + geom_tile(color=\"white\", size=0.1)\ngg <- gg + scale_fill_viridis_c(name=\"# Visitas\", label=comma)\ngg <- gg + coord_equal()\ngg <- gg + labs(x=NULL, y=NULL, title=\"Visitas por día & hora\")\ngg <- gg + theme_tufte(base_family=\"Helvetica\")\ngg <- gg + theme(plot.title=element_text(hjust=0.1))\ngg <- gg + theme(axis.ticks=element_blank())\ngg <- gg + theme(axis.text.y =element_text(size=12))\ngg <- gg + theme(axis.text.x =element_text(size=10))\ngg <- gg + theme(legend.title=element_text(size=10))\ngg <- gg + theme(legend.text=element_text(size=8))\ngg\n\n\n```\n\n\n</br>\n</br>\n\n\n###Sesiones por día - evolutivo\n\n</br>\n\nEste gráfico nos muestra la evolución diaria de las sesiones. Rápidamente podemos apreciar en qué día hubo más visitas y en qué día hubo menos visitas.\n\nBasicamente notamos que los picos coinciden con el lanzamiento de los posts en el blog.\n\n\n```{r sesiones-por-dia, message=FALSE, warning=FALSE, dependson='data-transformation'}\n\n\n\n\n#graph sesiones por día - evolutivo\n\n\n\ntitle <- \"Sesiones por día\"\nsubtitle <- \"Los picos en las visitas coinciden con la publicación de los posts en el blog\"\n\n\n\nggplot(data=sesiones_por_dia, aes(x=date, y=sessions)) +\n  geom_line(stat=\"identity\") +\n  labs(title = title, subtitle = subtitle, x = \"\", y = \"sesiones\") +\n  theme_ipsum() \n\n\n\n\n```\n\n\n\n###Sesiones por fuente, por mes\n\n\n####Limpieza de datos\n\n\n</br>\n\n\nAprender a limpiar datos es de suma importancia para cualquier analista. Esta es la parte más tediosa porque consume la mayor parte de nuestras horas de trabajo (¡¡¡y no es divertido!!!).\n\nEra la parte más tediosa, por qué tenemos que hacer este trabajo, si le podemos ordenar a la computadora que lo haga por nosotros (shhh...). \n\nLamentablemente, ni la fuente (`source`), ni el medio (`medium`) viene muchas veces en la forma correcta. Por lo que necesitamos generar la columna `fuente` con los siguientes valores posibles: `adwords`, `orgánico`, `email`, `redes sociales`, `linkedin`, `otras`.\n\n\nSi bien es un tópico sumamente importante, en esta ocasión nos centraremos en explicarles cómo generar los gráficos. Recién, en el siguiente post, que se llamará:  `Usando R para agrupar fuentes de Google Analytics`, veremos cómo limpiar y agrupar las fuentes de forma correcta.\n\nPor ahora, les dejo este gráfico que espero los entusiasme con las posibilidades que ofrece R, y en particular el paquete `ggplot2` para generar programáticamente gráficos con nuestra data de `Google Analytics`.\n\n\n\n```{r cleaning-data, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, dependson='sesiones'}\n\n\n#######################################################\n################ Limpieza de datos ####################\n#######################################################\n\n\n\n#######################\n### Fuente correcta ###\n#######################\n\n\n\nsesiones$fuente <- NA\n\n\n\nfor (i in 1:nrow(sesiones)) {\n  \n  \n  ### PATHs\n  \n  spam.path <- paste(c(\"site.*\", \".*event.*\", \".*free.*\", \".*theguardlan.*\",\".*.\\\\org\",\n                       \".*guardlink.*\", \".*torture.*\", \".*forum.*\", \".*buy.*\",\n                       \".*share.*\", \".*buttons.*\", \".*pyme\\\\.lavoztx\\\\.com\\\\.*\",\n                       \".*amezon.*\", \".*porn.*\", \"quality\", \"trafficgenius\\\\.xyz\",\n                       \"gametab\\\\.myplaycity\\\\.com\", \"login.*\", \"mega.*\", \"blog\",\n                       \"[0-9]{3}\\\\.[0-9]{2}.*\", \".*\\\\:.*\", \".*\\\\.xyz\", \"online\", \"internet\"),\n                     collapse=\"|\")\n  \n  \n  \n  adsense.path <- paste(c(\"tpc.googlesyndication.com\",\n                          \"googleads[.]g[.]doubleclick[.]net\"),\n                        collapse=\"|\")\n  \n  \n  \n  \n  adwords.path <- paste(c(\"cpc\", \"search\",\n                          \"ccp\",\"google_display\",\n                          \"cpm\",\"cpv\",\"youtube.*\",\"video.*\",\n                          \"google\", \"google_blast\",\"(not set)\"),\n                        collapse=\"|\")\n  \n  \n  \n  \n  email.path <- paste(c(\".*mail.*\", \"newsletter\"\n  ),\n  collapse=\"|\")\n  \n  \n  \n  \n  referral.path <- paste(c(\".*google\\\\.com\\\\.pe.*\",\n                           \".*google\\\\.co\\\\.ve.*\",\n                           \".*google\\\\.com\\\\.br.*\",\n                           \".*google\\\\.com\\\\.bo.*\",\n                           \".*google\\\\.com\\\\.ar.*\",\n                           \".*google\\\\.com.*\",\n                           \"sodimac.com.pe\",\n                           \"falabella.com.pe\",\n                           \"beneficios.gruporomero.com.pe\",\n                           \"somossesiones.net\",\"shop.lenovo.com\",\n                           \"canonexperience.pe\", \"lg.com\", \"deperu.com\"\n  ),\n  collapse=\"|\")\n  \n  \n  linkedin.path <- \"linkedin\"\n  \n  \n  \n  redes.sociales.path <- paste(c(\".*fac?e.*\",\n                                 \".*twitt?.*\",\"tw.*\", \"pp.*\"),\n                               collapse=\"|\")\n  \n  \n  \n  ritmo.romantica.path <- paste(c(\"ritmo.*\"\n  ),\n  collapse=\"|\")\n  \n  \n  \n  prensmart.path <- paste(c(\"prensmart.*\"\n  ),\n  collapse=\"|\")\n  \n  organic.path <- paste(c(\"start.iminent.com\",\".*search.*\",\n                          \"websearch.com\",\"crawler.com|allmyweb.com\"),\n                        collapse=\"|\")\n  \n  \n  \n  otros.path <- paste(c(\"web\", \"popup\", \"contenido\"),\n                      collapse=\"|\")\n  \n  \n  #direct.path <- \"//(direct//).*\"\n  \n  ### GREPL PART\n  adsense <- grepl(adsense.path, sesiones$source[i], ignore.case = T)\n  \n  \n  adwords.medium <- grepl(adwords.path,sesiones$medium[i], ignore.case = T)\n  \n  adwords.source <- grepl(adwords.path,sesiones$source[i], ignore.case = T)\n  \n  \n  email.medium <- grepl(email.path,sesiones$medium[i], ignore.case = T)\n  \n  email.source <- grepl(email.path,sesiones$source[i], ignore.case = T)\n  \n  \n  \n  linkedin.source <- grepl(linkedin.path,sesiones$source[i], ignore.case = T)\n  \n  \n  \n  referral.medium <- grepl(\"referral\", sesiones$medium[i],\n                           ignore.case = T)\n  \n  referral.source <- grepl(referral.path, sesiones$source[i],\n                           ignore.case = T)\n  \n  \n  spam <- grepl(spam.path, sesiones$source[i],\n                ignore.case = T)\n  \n  \n  \n  redes.sociales <- grepl(redes.sociales.path, sesiones$source[i],\n                          ignore.case = T)\n  \n  \n  ritmo.romantica <- grepl(ritmo.romantica.path, sesiones$source[i],\n                           ignore.case = T)\n  \n  \n  \n  prensmart <- grepl(prensmart.path, sesiones$source[i],\n                     ignore.case = T)\n  \n  organic <- grepl(organic.path, sesiones$source[i], ignore.case = T)\n  \n  \n  \n  otros <- grepl(otros.path, sesiones$medium[i], ignore.case = T)\n  \n  #directo <- grepl(direct.path, sesiones$source[i], ignore.case = T)\n  \n  \n  \n  ### Conditional part\n  \n  ### Directo tiene un espacio en blanco\n  \n  if (sesiones$source[i] == \"(direct)\") {\n    sesiones$fuente[i] <- \"directo\"\n  } \n  \n  \n  else if (referral.source | otros) {\n    \n    sesiones$fuente[i] <- \"referencias\"\n    \n  }\n  \n  \n  else if (sesiones$medium[i] == \"organic\" |\n           organic) {\n    sesiones$fuente[i] <- \"orgánico\"\n  }\n  \n  else if (adwords.source\n           & adwords.medium) {\n    \n    sesiones$fuente[i] <- \"adwords\"\n  }\n  \n  \n  \n  else if (adsense) {\n    \n    sesiones$fuente[i] <- \"adsense\"\n  }\n  \n  \n  else if (email.medium | email.source) {\n    \n    sesiones$fuente[i] <- \"email\"\n  }\n  \n  \n  else if (linkedin.source) {\n    \n    sesiones$fuente[i] <- \"linkedin\"\n  }\n  \n  \n  \n  else if (redes.sociales) {\n    \n    sesiones$fuente[i] <- \"redes sociales\"\n  }\n  \n  else if (ritmo.romantica) {\n    \n    sesiones$fuente[i] <- \"ritmo rom?ntica\"\n  }\n  \n  \n  else if (prensmart) {\n    \n    sesiones$fuente[i] <- \"prensmart\"\n    \n  }\n  \n  \n  else if (spam) {\n    \n    sesiones$fuente[i] <- \"spam\"\n  }\n  \n  else {\n    sesiones$fuente[i] <- \"spam\"\n  }\n}\n\n\n\n\n\n\n######################\n\n\n```\n\n\n</br>\n</br>\n\n\n### Sesiones por fuente, por mes\n\n</br>\n\n\n```{r sesiones-por-fuente, message=FALSE, warning=FALSE, dependson='data-transformation'}\n\n\n### sesiones por fuente, por mes\n\n\n\nsesiones_fuente <- sesiones %>%\n                    group_by(mes, fuente) %>%\n                    summarise(sessions = sum(sessions))\n\n\n\n\n\n\nee <- ggplot(sesiones_fuente, aes(x = fuente, y = sessions, fill = sessions,\n                                   label = sessions)) \nee <- ee +  geom_col()\nee <- ee + facet_wrap(~ mes) \nee <- ee + coord_flip()\nee <- ee + labs(x=\"meses\", y=\"sesiones\", title=\"Sesiones por mes\")\nee <- ee + scale_fill_gradient_tableau(palette = \"Orange\", name = \"# Sesiones\")\nee <- ee + theme(plot.title=element_text(hjust=0.1))\nee <- ee + theme(axis.ticks=element_blank())\nee <- ee + theme(axis.text=element_text(size=12))\nee <- ee + theme(legend.title=element_text(size=10))\nee <- ee + theme(legend.text=element_text(size=8))\n#ee <- ee + theme_ipsum_rc()\n#ee <- ee + theme_modern_rc()\nee <- ee + theme_fivethirtyeight()\nee <- ee + geom_label(hjust = -0.5)\nee <- ee + ylim(0,200)\n#ee <- ee + geom_label(fill = \"white\", vjust = -0.5)\nee\n\n\n```\n\n\n\n",
    "created" : 1506830114498.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1783966699",
    "id" : "A6EA267",
    "lastKnownWriteTime" : 1506960776,
    "last_content_update" : 1506960776517,
    "path" : "D:/omargonzalesdiaz/blog/02-googleAnalyticsR.Rmd",
    "project_path" : "02-googleAnalyticsR.Rmd",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}